body, html {
    margin: 0;
    padding: 0;
    height: 100%;
    display: flex;
    flex-direction: column;
    font-family: "Montserrat", sans-serif;
}

.app-container {
    flex: 1;
    display: flex;
    flex-direction: column;
    min-height: 100vh;
}

.headers {
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);
    display: flex;
    color: rgb(1, 1, 0);
    text-align: center;
}

div {
    display: flex;
    flex-direction: column;
}

.home-container{
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 20px;
}

.home-content{
    display: flex;
    flex-direction: row;
}

.container{

    margin: 1%;
    text-align: center;
    align-items: stretch;

}

.nav{
    display: flex;
    justify-content: space-between;
    align-items: stretch;
    color: white;
    background-color: black;
}

.logo{
    width: 12rem;
}


.nav ul{
    display: flex;
    list-style: none;
    align-items: center;
    padding: 2%;
    margin: 0;
    gap: 1rem;
}

.nav a{
    display: flex;
    text-decoration: none;
    align-items: center;
    padding: 5px;
    color: white;
}

.nav-link:hover{
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 10%; 
    background-color: #2D2E2F;
    
}

.pet-container {
    background-color: #fefefe;
    display: flex;
    flex: 2;
    align-self: center;
    border: 2px solid black;
    border-color: black;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    border-radius: 10px;
    width: 25%;
    padding: 8vw;
    margin: 20px;
    justify-content: center;
    align-items: center;
}

.challenges-box, .text-box {
    background-color: #fefefe;
    display: flex;
    flex-direction: column;
    align-items: center;
    flex: 2;
    border: 2px solid black;
    border-color: black;
    border-radius: 10px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    padding: 1rem;
    margin: 20px;
    width: 25%;
    text-align: center;
}

.footer{
    display: flex;
    justify-content: space-between;
    align-items: stretch;
    gap: 2rem;
    color: white;
    background-color: black;
    text-align: center;
    position: fixed;
    left: 0;
    bottom: 0;
    width: 100%;
    padding:10px;
}

.footer a:hover {
import React, { useEffect, useState } from 'react';
import '../App.css';

const Logs = () => {
  const [logsByMood, setLogsByMood] = useState({});

  useEffect(() => {
    const storedLogs = JSON.parse(localStorage.getItem('moodLogs')) || [];

    const grouped = storedLogs.reduce((acc, entry) => {
      const mood = entry.mood || 'Unknown';
      if (!acc[mood]) acc[mood] = [];
      acc[mood].push(entry);
      return acc;
    }, {});

    setLogsByMood(grouped);
  }, []);

  return (
    <div className="logs-container">
      <h2>Mood Logs</h2>
      {Object.keys(logsByMood).length === 0 ? (
        <p>No logs yet!</p>
      ) : (
        Object.entries(logsByMood).map(([mood, entries]) => (
          <div key={mood} className="mood-group">
            <h3>{mood.charAt(0).toUpperCase() + mood.slice(1)}</h3>
            <ul>
              {entries.map((entry, index) => (
                <li key={index}>
                  {entry.mood} ({entry.date})
                </li>
              ))}
            </ul>
          </div>
        ))
      )}
    </div>
  );
};
    color: #fdb515;
}
import React, { useEffect, useState } from 'react';
import '../App.css';

const Logs = () => {
  const [logsByMood, setLogsByMood] = useState({});

  useEffect(() => {
    const storedLogs = JSON.parse(localStorage.getItem('moodLogs')) || [];

    const grouped = storedLogs.reduce((acc, entry) => {
      const mood = entry.mood || 'Unknown';
      if (!acc[mood]) acc[mood] = [];
      acc[mood].push(entry);
      return acc;
    }, {});

    setLogsByMood(grouped);
  }, []);

  return (
    <div className="logs-container">
      <h2>Mood Logs</h2>
      {Object.keys(logsByMood).length === 0 ? (
        <p>No logs yet!</p>
      ) : (
        Object.entries(logsByMood).map(([mood, entries]) => (
          <div key={mood} className="mood-group">
            <h3>{mood.charAt(0).toUpperCase() + mood.slice(1)}</h3>
            <ul>
              {entries.map((entry, index) => (
                <li key={index}>
                  {entry.mood} ({entry.date})
                </li>
              ))}
            </ul>
          </div>
        ))
      )}
    </div>
  );
};

.footer ul{
    display: flex;
    list-style: none;
    align-items: center;
    justify-content: center;
    margin: 0;
    gap: 1rem;
}

.footer a{
    display: flex;
    text-decoration: none;
    align-items: center;
    padding: 0.25rem;
    color: white;
}

.user-level {
    display: flex;
    flex-direction: row;
    align-self: flex-start;
    align-items: center;
    justify-content: space-evenly;
    margin-left: 20px;
    width: 25%;
}

.progress-bar{
    background-color: #2D2E2F;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    height: 20px;
    border-radius: 10px;
    width: 100%;
    margin: 5px;
}

.progress-bar > span {
    display: block;
    height: 100%;
    border-top-left-radius: 20px;
    border-bottom-left-radius: 20px;
    background-color: rgb(43,194,83);
    box-shadow: 
      inset 0 2px 9px  rgba(255,255,255,0.3),
      inset 0 -2px 6px rgba(0,0,0,0.4);
    position: relative;
    overflow: hidden;
  }

.level-circle{
    display: flex;
    height: 30px;
    width: 40px;
    background-color: rgba(0,0,0,0.4);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    border-radius: 50%;
    align-items: center;
    justify-content: center;
    font-weight: bold;
}

.challenge-item {
    display: flex;
    flex-direction: row;
    list-style: none;
    margin: 20px;
    font-size: 16px;
    align-items: center;
    gap: 8px;
  }

  .checkbox-label{
    display: flex;
    align-items: center;
    gap: 10px;
    cursor: pointer;
  }

  .checkbox-label input[type="checkbox"] {
    appearance: none;
    -webkit-appearance: none;
    outline: none;
    margin: 0;
    border-radius: 3px;
    border: 2px solid #015d62;
    display: grid;
    place-content: center;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }
  
  /* Add checkmark using pseudo-element */
  .checkbox-label input[type="checkbox"]::before {
    content: "";
    width: 10px;
    height: 10px;
    background-color: #015d62;
    transform: scale(0);
    transition: transform 0.2s ease;
  }
  
  /* Show checkmark when checked */
  .checkbox-label input[type="checkbox"]:checked::before {
    transform: scale(1);
  }